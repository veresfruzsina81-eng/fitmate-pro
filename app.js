/* ========= HU META: f√°jln√©v -> magyar c√≠m + le√≠r√°s ========= */
const HU_META = {
  // H√≠z√°s ‚Äì F√©rfi
  'hizas1.mp4':   { title: 'Fekv≈ët√°masz', desc: 'Mell √©s tricepsz er≈ës√≠t√©se.' },
  'hizas2.mp4':   { title: 'V alak√∫ el≈ërehajl√°s', desc: 'Core √©s mobilit√°s fejleszt√©se.' },
  'hizas3.mp4':   { title: 'Guggol√°sb√≥l felugr√°s', desc: 'Robban√©konys√°g, als√≥test.' },
  'hizas4.mp4':   { title: 'Plank k√©zv√°lt√°ssal', desc: 'V√°ll-stabilit√°s, core.' },
  'hizas5.mp4':   { title: 'Fekv≈ët√°maszb√≥l felugr√°s (burpee)', desc: 'Teljes test, pulzusemel≈ë.' },

  // H√≠z√°s ‚Äì N≈ë
  'hizas_w1.mp4': { title: 'Cs√≠p≈ëemel√©s fekve', desc: 'Farizom √©s combhajl√≠t√≥.' },
  'hizas_w2.mp4': { title: 'Guggol√°s terpeszben', desc: 'Comb √©s farizom, folyamatos.' },
  'hizas_w3.mp4': { title: 'T√©rdel≈ë fekv≈ët√°masz', desc: 'K√∂nny√≠tett mell- √©s karer≈ës√≠t√©s.' },
  'hizas_w4.mp4': { title: 'Oldalfekv√©s l√°bemel√©ssel', desc: 'K√ºls≈ë comb, farizom.' },
  'hizas_w5.mp4': { title: 'V√°ltott l√°b plank helyzetben', desc: 'Core √©s cs√≠p≈ëmobilit√°s.' },

  // Sz√°lk√°s√≠t√°s ‚Äì F√©rfi
  'szalkasitas1.mp4': { title: 'Fekv≈ët√°masz', desc: 'Mell √©s tricepsz.' },
  'szalkasitas2.mp4': { title: 'Plank', desc: 'Core tart√°s.' },
  'szalkasitas3.mp4': { title: 'Egyl√°bas kit√∂r√©s', desc: 'Comb √©s far.' },
  'szalkasitas4.mp4': { title: 'Oldaltart√°s (k√∂ny√∂k√∂n plank)', desc: 'Ferde hasizom.' },
  'szalkasitas5.mp4': { title: 'Guggol√°s felr√∫g√°ssal', desc: 'Teljes test, pulzus.' },

  // Sz√°lk√°s√≠t√°s ‚Äì N≈ë
  'szalkasitas_w1.mp4': { title: 'Cs√≠p≈ëemel√©s fekve', desc: 'Farizom √©s combhajl√≠t√≥.' },
  'szalkasitas_w2.mp4': { title: 'Fekv≈ët√°maszban v√°ltott l√°b el≈ëre', desc: 'Core √©s kardi√≥ egyszerre.' },
  'szalkasitas_w3.mp4': { title: 'Terpeszugr√°s k√©zny√∫jt√°ssal', desc: 'Kardi√≥, v√°ll√∂v.' },
  'szalkasitas_w4.mp4': { title: 'Fekv≈ët√°masz tart√°s', desc: 'Statikus core √©s v√°ll.' },
  'szalkasitas_w5.mp4': { title: 'Terpesz guggol√°s s√∫llyal', desc: 'Comb √©s far; s√∫lyz√≥ n√©lk√ºl is v√©gezhet≈ë.' },

  // Fogy√°s ‚Äì F√©rfi
  'fogyas1.mp4': { title: 'Terpeszugr√°s k√©zemel√©ssel', desc: 'Alap kardi√≥, bemeleg√≠t√©snek is j√≥.' },
  'fogyas2.mp4': { title: 'Magast√©rdemel√©s k√©zmagass√°gig', desc: 'Cardio, core.' },
  'fogyas3.mp4': { title: 'Burpee', desc: 'Teljes test, pulzusemel≈ë.' },
  'fogyas4.mp4': { title: 'Mountain climber el≈ëre-h√°tra', desc: 'Core √©s kardi√≥.' },
  'fogyas5.mp4': { title: 'Guggol√°sb√≥l felugr√°s', desc: 'Als√≥test, kardi√≥.' },

  // Fogy√°s ‚Äì N≈ë
  'fogyas_w1.mp4': { title: 'Guggol√°s terpeszben', desc: 'Comb √©s farizom.' },
  'fogyas_w2.mp4': { title: 'Cs√≠p≈ëemel√©s fekve', desc: 'Farizom, hamstring.' },
  'fogyas_w3.mp4': { title: 'Oldals√≥ ugr√°s keresztezve', desc: 'Kardi√≥, koordin√°ci√≥.' },
  'fogyas_w4.mp4': { title: 'Guggol√°sb√≥l felugr√°s', desc: 'Als√≥test, kardi√≥.' },
  'fogyas_w5.mp4': { title: 'Ugr√≥k√∂t√©l', desc: '√Åll√≥k√©pess√©g fejleszt√©se.' }
};

/* ========= Fix f√°jllist√°k ========= */
const FILES = {
  fogyas: {
    ferfi: ['fogyas1.mp4','fogyas2.mp4','fogyas3.mp4','fogyas4.mp4','fogyas5.mp4'],
    no:    ['fogyas_w1.mp4','fogyas_w2.mp4','fogyas_w3.mp4','fogyas_w4.mp4','fogyas_w5.mp4']
  },
  szalkasitas: {
    ferfi: ['szalkasitas1.mp4','szalkasitas2.mp4','szalkasitas3.mp4','szalkasitas4.mp4','szalkasitas5.mp4'],
    no:    ['szalkasitas_w1.mp4','szalkasitas_w2.mp4','szalkasitas_w3.mp4','szalkasitas_w4.mp4','szalkasitas_w5.mp4']
  },
  hizas: {
    ferfi: ['hizas1.mp4','hizas2.mp4','hizas3.mp4','hizas4.mp4','hizas5.mp4'],
    no:    ['hizas_w1.mp4','hizas_w2.mp4','hizas_w3.mp4','hizas_w4.mp4','hizas_w5.mp4']
  }
};

/* ========= √Ållapot + seg√©dek ========= */
const S = {
  goal: null,
  gender: 'no',
  done: +(localStorage.getItem('done')||0),
  streak:+(localStorage.getItem('streak')||0)
};
const qs=s=>document.querySelector(s), qsa=s=>[...document.querySelectorAll(s)];
function show(id){ qsa('.view').forEach(v=>v.classList.remove('show')); qs('#v-'+id).classList.add('show'); setBG(id); }
function setBG(view){
  const m={splash:'kezdo.png', goal:'fogyas.png', home:(S.goal||'fogyas')+'.png', workout:(S.goal||'fogyas')+'.png', cal:'hizas.png', perf:'szalkasitas.png', chat:'fogyas.png'};
  qs('#bg').style.backgroundImage=`url('${m[view]||'kezdo.png'}')`;
}

/* ========= Splash ‚Üí Goal ========= */
qs('#start').onclick=()=>show('goal');

/* ========= C√©lv√°laszt√°s ========= */
let tmpGoal='fogyas', tmpGender='no';
qsa('.goal-list .item').forEach(it=>{
  it.onclick=()=>{ qsa('.goal-list .item').forEach(x=>x.classList.remove('active')); it.classList.add('active'); tmpGoal=it.dataset.goal; qs('#bg').style.backgroundImage=`url('${tmpGoal}.png')`; };
});
qs('#gender').onchange=e=>tmpGender=e.target.value;
qs('#toHome').onclick=()=>{
  S.goal=tmpGoal; S.gender=tmpGender;
  localStorage.setItem('goal',S.goal); localStorage.setItem('gender',S.gender);
  qs('#goalLabel').textContent=`C√©l: ${S.goal==='fogyas'?'Fogy√°s':S.goal==='szalkasitas'?'Sz√°lk√°s√≠t√°s':'H√≠z√°s'}`;
  renderExList(); ensureChatWelcome(true); show('home');
};

/* ========= Navig√°ci√≥ ========= */
qsa('[data-go]').forEach(b=>b.onclick=()=>show(b.dataset.go));
qsa('#v-home [data-open]').forEach(t=>t.onclick=()=>{
  const to=t.dataset.open;
  if(to==='workout') renderExList();
  show(to);
});

/* ========= Gyakorlat lista ========= */
function getExercises(){
  const names = ((FILES[S.goal]||{})[S.gender]||[]);
  return names.map(fn=>({file:fn, title:(HU_META[fn]||{}).title||fn, desc:(HU_META[fn]||{}).desc||''}));
}
function renderExList(){
  const wrap=qs('#exList'); if(!wrap) return; wrap.innerHTML='';
  const arr=getExercises();
  if(!arr.length){ wrap.innerHTML='<div class="card pad"><b>M√©g nincs felt√∂ltve ehhez a c√©lhoz.</b></div>'; return; }
  arr.forEach((it,i)=>{
    const row=document.createElement('div');
    row.className='list-item';
    row.innerHTML=`
      <img class="thumb" src="${S.goal}.png" alt="">
      <div style="flex:1"><div style="font-weight:800">#${i+1}. gyakorlat</div><div class="muted">${it.title}</div></div>
      <button class="btn">Megnyit</button>`;
    row.querySelector('.btn').onclick=()=>openEx(it);
    wrap.appendChild(row);
  });
}

/* ========= Mod√°l + Id≈ëz√≠t≈ë (stabil, garant√°lt 15 mp pihen≈ë) ========= */
const modal=qs('#modal'), mClose=qs('#mClose'), v=qs('#exVideo'), title=qs('#exTitle'), desc=qs('#exDesc');
const iSets=qs('#iSets'), iReps=qs('#iReps'), iSec=qs('#iSec');
const bStart=qs('#bStart'), bPause=qs('#bPause'), bNext=qs('#bNext');
const clock=qs('#clock'), statusEl=qs('#status');

let tick=null, phase='idle'; // 'rep' | 'rest' | 'idle' | 'done'
let curSet=1, curRep=0, totalSets=3, reps=12, secPer=2, paused=false;

function mmss(s){ const m=String(Math.floor(s/60)).padStart(2,'0'); const ss=String(s%60).padStart(2,'0'); return `${m}:${ss}`; }
function tone(){ try{ const C=new (window.AudioContext||window.webkitAudioContext)(); const o=C.createOscillator(), g=C.createGain(); o.connect(g); g.connect(C.destination); o.type='sine'; o.frequency.value=900; g.gain.value=.06; o.start(); setTimeout(()=>{o.stop();C.close()},170);}catch(e){} }
function setClock(s){ clock.textContent=mmss(s); }

function stopTick(){ if(tick){ clearInterval(tick); tick=null; } }

// bels≈ë futtat√≥ ‚Äì √°ltal√°nos visszasz√°ml√°l√≥
function runCountdown(seconds, onEnd, label){
  let left=seconds; setClock(left); statusEl.textContent=label; stopTick();
  tick=setInterval(()=>{
    if(!paused){ left--; setClock(left); }
    if(left<=0){ stopTick(); tone(); onEnd&&onEnd(); }
  },1000);
}

function doRep(){
  phase='rep';
  curRep++;
  runCountdown(secPer, ()=>{
    if(curRep<reps){ doRep(); }
    else { // k√∂r v√©ge -> pihen≈ë
      curRep=0;
      if(curSet<=totalSets){ doRest(); }
    }
  }, `K√∂r ${curSet}/${totalSets} ‚Ä¢ Ism√©tl√©s ${curRep}/${reps}`);
}

function doRest(){
  phase='rest';
  runCountdown(15, ()=>{
    if(curSet<totalSets){ curSet++; doRep(); }
    else { finishExercise(); }
  }, `Pihen≈ë 15 mp ‚Ä¢ K√©sz k√∂r: ${curSet}/${totalSets}`);
}

function startTimer(){
  totalSets = Math.max(1,+iSets.value||1);
  reps      = Math.max(1,+iReps.value||1);
  secPer    = Math.max(1,+iSec.value||1);
  curSet=1; curRep=0; paused=false;
  doRep();
}

function finishExercise(){
  phase='done'; stopTick(); setClock(0);
  statusEl.innerHTML='üéâ <b>√úgyes vagy! B√ºszke vagyok r√°d!</b> V√°laszd a k√∂vetkez≈ë gyakorlatot.';
  S.done++; localStorage.setItem('done',S.done); qs('#done').textContent=S.done;
  const today=new Date().toDateString(), last=localStorage.getItem('lastDone')||'';
  if(last!==today){ S.streak++; localStorage.setItem('streak',S.streak); localStorage.setItem('lastDone',today); qs('#streak').textContent=S.streak; }
}

function openEx(it){
  title.textContent=it.title; desc.textContent=it.desc||''; v.src=it.file+'?v='+Date.now(); v.play().catch(()=>{});
  iSets.value=3; iReps.value=12; iSec.value=2; setClock(0); statusEl.textContent='';
  stopTick(); phase='idle'; modal.classList.add('show');
}
mClose.onclick=()=>{ stopTick(); modal.classList.remove('show'); v.pause(); };

bStart.onclick=()=>{ if(phase==='rep'||phase==='rest'){ /* m√°r fut */ } else { startTimer(); } };
bPause.onclick=()=>{ paused=!paused; bPause.textContent=paused?'Folytat√°s':'Sz√ºnet'; };
bNext.onclick=()=>{ // k√©zi ugr√°s a k√∂vetkez≈ë k√∂rre
  stopTick();
  if(phase==='rep' || phase==='rest'){ // befejezz√ºk ezt a k√∂rt
    if(curSet<totalSets){ curSet++; curRep=0; doRep(); }
    else { finishExercise(); }
  }
};

/* ========= Kal√≥ria ========= */
const meals=JSON.parse(localStorage.getItem('meals')||'[]');
function saveMeals(){ localStorage.setItem('meals',JSON.stringify(meals)); }
function renderMeals(){ const wrap=qs('#mealList'); wrap.innerHTML=''; let sum=0; meals.forEach((m,i)=>{ sum+=m.k; const r=document.createElement('div'); r.className='item-row'; r.innerHTML=`<span>${m.n}</span><span>${m.k} kcal</span>`; r.onclick=()=>{meals.splice(i,1);saveMeals();renderMeals();}; wrap.appendChild(r); }); qs('#sumKcal').innerHTML='<b>'+sum+'</b>'; }
qs('#addMeal').onclick=()=>{ const n=qs('#mealName').value.trim(); const k=+qs('#mealKcal').value||0; if(!n||!k) return; meals.push({n,k}); saveMeals(); renderMeals(); qs('#mealName').value=''; qs('#mealKcal').value=''; };
renderMeals();

/* ========= Chat (c√©lhoz igaz√≠tott √ºdv√∂zl√©s + ‚Äûmindkett≈ë‚Äù felismer√©s) ========= */
const chatBox = document.getElementById('chatBox');
function pushBubble(t, me=false){ const b=document.createElement('div'); b.className='bubble'+(me?' me':' bot'); b.textContent=t; chatBox.appendChild(b); chatBox.scrollTop=1e9; }
function goalWelcome(g){ if(g==='hizas') return 'Szia! Miben seg√≠thetek a h√≠z√°sban / t√∂megn√∂vel√©sben?'; if(g==='szalkasitas') return 'Szia! Miben seg√≠thetek a sz√°lk√°s√≠t√°sban?'; return 'Szia! Miben seg√≠thetek a fogy√°sban?'; }
function ensureChatWelcome(reset=false){ if(reset) chatBox.innerHTML=''; if(chatBox.childElementCount===0) pushBubble(goalWelcome(S.goal||'fogyas')); }

function dietAdvice(goal){
  if(goal==='hizas') return 'T√∂megn√∂vel√©shez: +250‚Äì400 kcal/nap t√∂bblet, 1.6‚Äì2.2 g/ttkg feh√©rje, 2‚Äì3 f≈ë√©tkez√©s + 2 snack, teljes √©rt√©k≈± sz√©nhidr√°t √©s j√≥ zs√≠rok.';
  if(goal==='szalkasitas') return 'Sz√°lk√°s√≠t√°shoz: napi 300‚Äì500 kcal deficit, ~2 g/ttkg feh√©rje, sok z√∂lds√©g, 30‚Äì40 ml/ttkg folyad√©k.';
  return 'Fogy√°shoz: 400‚Äì600 kcal deficit, 1.6‚Äì2.0 g/ttkg feh√©rje, rostos k√∂retek (rizs, bulgur, z√∂lds√©g), cukros italok off.';
}
function workoutAdvice(goal){
  if(goal==='hizas') return 'T√∂megn√∂vel√©shez: heti 3‚Äì5 er≈ës√≠t√©s, 8‚Äì12 ism., 3‚Äì5 sorozat; alapgyakorlatok; pihen≈ë 60‚Äì120 mp.';
  if(goal==='szalkasitas') return 'Sz√°lk√°s√≠t√°shoz: heti 3 er≈ës√≠t√©s + 2‚Äì3 HIIT/kardi√≥; k√∂redz√©s 30‚Äì45 perc; pihen≈ëk 30‚Äì60 mp.';
  return 'Fogy√°shoz: heti 3 er≈ës√≠t√©s + 3√ó 20‚Äì30 perc kardi√≥ (s√©ta/fut√°s/bring√°); nagy mozdulatok, k√∂redz√©s.';
}
function bothAdvice(goal){ return dietAdvice(goal)+' '+workoutAdvice(goal); }

document.getElementById('sendChat').onclick=async()=>{
  const inp=qs('#chatInput'); const q=(inp.value||'').trim(); if(!q) return; inp.value=''; pushBubble(q,true);
  const text=q.toLowerCase();
  const wantsDiet=/√©trend|kaja|kal(√≥|o)ria|√©tkez|feh(√©|e)rje/.test(text);
  const wantsWork=/edz(√©|e)s|gyakorlat|edz(≈ë|o)terem|sorozat|ism(√©|e)tl(√©|e)s/.test(text);
  const wantsBoth=/mindkett(≈ë|o)/.test(text)||(wantsDiet&&wantsWork);
  let reply = wantsBoth ? bothAdvice(S.goal||'fogyas') : wantsDiet ? dietAdvice(S.goal||'fogyas') : wantsWork ? workoutAdvice(S.goal||'fogyas') : (goalWelcome(S.goal||'fogyas')+' √çrj: ‚Äû√©trend‚Äù, ‚Äûedz√©s‚Äù, vagy ‚Äûmindkett≈ë‚Äù.');
  pushBubble(reply,false);

  // opcion√°lis: backend plusz v√°lasz
  try{
    const r=await fetch('/.netlify/functions/ai-chat',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({prompt:q,goal:S.goal,gender:S.gender})});
    if(r.ok){ const j=await r.json(); if(j && j.reply) pushBubble(j.reply,false); }
  }catch(e){}
};

/* ========= Ind√≠t√°s ========= */
(function boot(){
  S.goal=null; // mindig Splash -> Goal
  qs('#done').textContent=S.done; qs('#streak').textContent=S.streak;
  ensureChatWelcome(true);
  show('splash');
})();
